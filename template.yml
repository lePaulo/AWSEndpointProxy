AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Repository:
    Type: String
    
  Tag:
    Type: String
    Default: latest
    
  AutoScalingMinCapacity:
    Type: Number
    Default: 1
    
  AutoScalingMaxCapacity:
    Type: Number
    Default: 10
    
  AutoScalingTargetValue:
    Type: Number
    Description: Expected CPU usage (in %) to target
    Default: 75
    
Resources:
  ## Application defintion
  
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets: 
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
  
  LoadBalancerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: ip
      Port: 3128
      Protocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckEnabled: True
      HealthCheckPort: traffic-port
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Image
          Value: !Ref Tag

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3128'
          ToPort: '3128'
          CidrIp: 192.168.0.0/16
        - IpProtocol: tcp
          FromPort: '3128'
          ToPort: '3128'
          CidrIp: 172.16.0.0/12
        - IpProtocol: tcp
          FromPort: '3128'
          ToPort: '3128'
          CidrIp: 10.0.0.0/8
      VpcId: !Ref VPC
      
  Service:
    DependsOn: 
      - LoadBalancerListener80
      - LoadBalancerListener443
    Type: AWS::ECS::Service
    Properties:
      HealthCheckGracePeriodSeconds: 45
      Cluster: !Ref Cluster
      DesiredCount: !Ref AutoScalingMinCapacity
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: application
          ContainerPort: 3128
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
             - !GetAtt TaskSecurityGroup.GroupId
          Subnets: 
             - !Ref SubnetA
             - !Ref SubnetB
             - !Ref SubnetC

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
       - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Volumes: 
        - Name: "log_scratch"
      ContainerDefinitions:
        - Name: application
          Image: !Sub ${Repository}:${Tag}
          Essential: true
          LogConfiguration: 
            LogDriver: awslogs
            Options: 
              awslogs-group: !Ref ApplicationContainerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 3128
          Cpu: 156
          Memory: 412
          MountPoints:
            - ContainerPath: /var/log/squid3
              SourceVolume: log_scratch
          Environment:
            - Name: Tag
              Value: !Ref Tag
            - Name: AWS_REGION
              Value: !Ref AWS::Region
        - Name: cwlogs
          Image: joshbalfour/cloudwatch-logs
          Essential: true
          Cpu: 100
          Memory: 100
          MountPoints:
            - ContainerPath: /mnt/logs
              SourceVolume: log_scratch
          Command:
            - !Sub /mnt/logs/access.log:${SquidAccessLogGroup}
          Environment:
            - Name: Tag
              Value: !Ref Tag
            - Name: AWS_REGION
              Value: !Ref AWS::Region
  
  ApplicationContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties : 
      LogGroupName : !Sub /ecs/${Cluster}
      RetentionInDays : 14
  
  SquidAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties : 
      LogGroupName : !Sub /ecs/${Cluster}/access.log
      RetentionInDays : 14
      
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref AutoScalingMinCapacity
      MaxCapacity: !Ref AutoScalingMaxCapacity
      ResourceId: !Sub service/${Cluster}/${Service.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt FargateAutoscalingRole.Arn
  
  TargetTrackingScalingAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${Service.Name}TargetTrackingAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration: 
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue
        
  FargateAutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.application-autoscaling.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: FargateAutoscalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action: 
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
  
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CreateLogGroupPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action: 
                  - logs:CreateLogGroup
  
  ## VPC Definition
  VPC:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: 10.0.0.0/26
      Tags:
        - Key: Name
          Value: proxy-vpc
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/28
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: proxy-pub-a
  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.16/28
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: proxy-pub-b
  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.32/28
      AvailabilityZone: 
        Fn::Select: 
          - 2
          - Fn::GetAZs: ""
      Tags:
      - Key: Name
        Value: proxy-pub-c
  SubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub 'igw-${VPC}'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Route table with IGW
  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      
  VPCEndpointService:
    Type: "AWS::EC2::VPCEndpointService"
    Properties:
      NetworkLoadBalancerArns: 
        - !Ref NetworkLoadBalancer
      AcceptanceRequired: False

Outputs: 
  VPCEndpointServiceId: 
    Value: !Ref VPCEndpointService
